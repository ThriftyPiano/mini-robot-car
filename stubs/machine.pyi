# MicroPython machine module stub for ESP32
from typing import Any, Optional, Union

class Pin:
    """Control GPIO pins"""
    IN = 1
    OUT = 3
    PULL_UP = 2
    PULL_DOWN = 0
    IRQ_RISING = 1
    IRQ_FALLING = 2
    IRQ_LOW_LEVEL = 4
    IRQ_HIGH_LEVEL = 8
    
    def __init__(self, id: int, mode: int = -1, pull: int = -1, *, value: Any = None, drive: int = 2, alt: int = -1) -> None: ...
    def init(self, mode: int = -1, pull: int = -1, *, value: Any = None, drive: int = 2, alt: int = -1) -> None: ...
    def value(self, x: Any = None) -> Any: ...
    def __call__(self, x: Any = None) -> Any: ...
    def on(self) -> None: ...
    def off(self) -> None: ...
    def toggle(self) -> None: ...
    def mode(self, mode: Optional[int] = None) -> int: ...
    def pull(self, pull: Optional[int] = None) -> int: ...
    def drive(self, drive: Optional[int] = None) -> int: ...
    def irq(self, handler: Any = None, trigger: int = (IRQ_FALLING | IRQ_RISING), *, priority: int = 1, wake: Any = None, hard: bool = False) -> Any: ...

class PWM:
    """Pulse Width Modulation"""
    def __init__(self, dest: Pin, *, freq: int = 1000, duty_u16: int = 0, duty_ns: int = 0) -> None: ...
    def init(self, *, freq: int = -1, duty_u16: int = -1, duty_ns: int = -1) -> None: ...
    def deinit(self) -> None: ...
    def freq(self, value: Optional[int] = None) -> int: ...
    def duty_u16(self, value: Optional[int] = None) -> int: ...
    def duty_ns(self, value: Optional[int] = None) -> int: ...

class ADC:
    """Analog to Digital Converter"""
    ATTN_0DB = 0
    ATTN_2_5DB = 1
    ATTN_6DB = 2
    ATTN_11DB = 3
    WIDTH_9BIT = 0
    WIDTH_10BIT = 1
    WIDTH_11BIT = 2
    WIDTH_12BIT = 3
    
    def __init__(self, pin: Pin, *, atten: int = ATTN_0DB) -> None: ...
    def read_u16(self) -> int: ...
    def read_uv(self) -> int: ...
    def atten(self, atten: Optional[int] = None) -> int: ...
    def width(self, width: Optional[int] = None) -> int: ...

class DAC:
    """Digital to Analog Converter"""
    def __init__(self, pin: Pin) -> None: ...
    def write(self, value: int) -> None: ...

class TouchPad:
    """Touch sensor"""
    def __init__(self, pin: Pin) -> None: ...
    def read(self) -> int: ...
    def config(self, threshold: int) -> None: ...

class I2C:
    """I2C bus"""
    def __init__(self, id: int = -1, *, scl: Pin, sda: Pin, freq: int = 400000) -> None: ...
    def init(self, scl: Pin, sda: Pin, *, freq: int = 400000) -> None: ...
    def deinit(self) -> None: ...
    def scan(self) -> list[int]: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def readinto(self, buf: bytes, nack: bool = True) -> None: ...
    def write(self, buf: bytes) -> int: ...
    def readfrom(self, addr: int, nbytes: int, stop: bool = True) -> bytes: ...
    def readfrom_into(self, addr: int, buf: bytes, stop: bool = True) -> None: ...
    def writeto(self, addr: int, buf: bytes, stop: bool = True) -> int: ...
    def writevto(self, addr: int, vector: list, stop: bool = True) -> int: ...
    def readfrom_mem(self, addr: int, memaddr: int, nbytes: int, *, addrsize: int = 8) -> bytes: ...
    def readfrom_mem_into(self, addr: int, memaddr: int, buf: bytes, *, addrsize: int = 8) -> None: ...
    def writeto_mem(self, addr: int, memaddr: int, buf: bytes, *, addrsize: int = 8) -> int: ...

class SPI:
    """SPI bus"""
    MSB = 0
    LSB = 1
    
    def __init__(self, id: int, *, baudrate: int = 1000000, polarity: int = 0, phase: int = 0, bits: int = 8, firstbit: int = MSB, sck: Optional[Pin] = None, mosi: Optional[Pin] = None, miso: Optional[Pin] = None) -> None: ...
    def init(self, baudrate: int = -1, *, polarity: int = -1, phase: int = -1, bits: int = -1, firstbit: int = -1, sck: Optional[Pin] = None, mosi: Optional[Pin] = None, miso: Optional[Pin] = None) -> None: ...
    def deinit(self) -> None: ...
    def read(self, nbytes: int, write: int = 0x00) -> bytes: ...
    def readinto(self, buf: bytes, write: int = 0x00) -> None: ...
    def write(self, buf: bytes) -> int: ...
    def write_readinto(self, write_buf: bytes, read_buf: bytes) -> None: ...

class UART:
    """UART serial communication"""
    def __init__(self, id: int, *, baudrate: int = 9600, bits: int = 8, parity: Optional[int] = None, stop: int = 1, tx: Optional[Pin] = None, rx: Optional[Pin] = None, rts: Optional[Pin] = None, cts: Optional[Pin] = None, txbuf: int = 256, rxbuf: int = 256, timeout: int = 0, timeout_char: int = 0, invert: int = 0, flow: int = 0) -> None: ...
    def init(self, baudrate: int = 9600, bits: int = 8, parity: Optional[int] = None, stop: int = 1, *, tx: Optional[Pin] = None, rx: Optional[Pin] = None, txbuf: int = 256, rxbuf: int = 256, timeout: int = 0, timeout_char: int = 0, invert: int = 0, flow: int = 0) -> None: ...
    def deinit(self) -> None: ...
    def any(self) -> int: ...
    def read(self, nbytes: Optional[int] = None) -> Optional[bytes]: ...
    def readinto(self, buf: bytes, nbytes: Optional[int] = None) -> Optional[int]: ...
    def readline(self) -> Optional[bytes]: ...
    def write(self, buf: Union[bytes, str]) -> Optional[int]: ...
    def sendbreak(self) -> None: ...
    def flush(self) -> None: ...
    def txdone(self) -> bool: ...

class Timer:
    """Hardware timer"""
    ONE_SHOT = 0
    PERIODIC = 1
    
    def __init__(self, id: int) -> None: ...
    def init(self, *, mode: int = PERIODIC, period: int = -1, callback: Any = None) -> None: ...
    def deinit(self) -> None: ...

class WDT:
    """Watchdog timer"""
    def __init__(self, *, timeout: int = 5000) -> None: ...
    def feed(self) -> None: ...

def reset() -> None:
    """Reset the microcontroller"""
    ...

def soft_reset() -> None:
    """Soft reset the microcontroller"""
    ...

def reset_cause() -> int:
    """Get the reset cause"""
    ...

def unique_id() -> bytes:
    """Get unique device ID"""
    ...

def freq(hz: Optional[int] = None) -> int:
    """Get or set CPU frequency"""
    ...

def idle() -> None:
    """Put CPU into idle mode"""
    ...

def lightsleep(time_ms: Optional[int] = None) -> None:
    """Enter light sleep mode"""
    ...

def deepsleep(time_ms: Optional[int] = None) -> None:
    """Enter deep sleep mode"""
    ...

def wake_reason() -> int:
    """Get wake reason from sleep"""
    ...

def time_pulse_us(pin: Pin, pulse_level: int, timeout_us: int = 1000000) -> int:
    """Time a pulse on a pin"""
    ...

def bitstream(pin: Pin, encoding: int, timing: tuple, data: bytes) -> None:
    """Send a bitstream to a pin"""
    ...

# Reset causes
PWRON_RESET = 1
HARD_RESET = 2
WDT_RESET = 3
DEEPSLEEP_RESET = 4
SOFT_RESET = 5

# Wake reasons
PIN_WAKE = 1
EXT0_WAKE = 2
EXT1_WAKE = 3
TIMER_WAKE = 4
TOUCHPAD_WAKE = 5
ULP_WAKE = 6
