# MicroPython esp32 module stub for ESP32-specific functionality
from typing import Any, Optional

class Partition:
    """Flash partition"""
    BOOT = 0
    RUNNING = 1
    
    def __init__(self, id: Any) -> None: ...
    def info(self) -> tuple: ...
    def readblocks(self, block_num: int, buf: bytes) -> None: ...
    def writeblocks(self, block_num: int, buf: bytes) -> None: ...
    def ioctl(self, cmd: int, arg: int) -> Any: ...

class NVS:
    """Non-Volatile Storage"""
    def __init__(self, namespace: str) -> None: ...
    def get_i32(self, key: str) -> int: ...
    def set_i32(self, key: str, value: int) -> None: ...
    def get_blob(self, key: str) -> bytes: ...
    def set_blob(self, key: str, value: bytes) -> None: ...
    def erase_key(self, key: str) -> None: ...
    def commit(self) -> None: ...

class ULP:
    """Ultra Low Power coprocessor"""
    RESERVE_MEM = 2040
    
    def set_wakeup_period(self, period_index: int, period_us: int) -> None: ...
    def load_binary(self, load_addr: int, program_binary: bytes) -> None: ...
    def run(self, entry_point: int) -> None: ...

def wake_on_touch(wake: bool) -> None:
    """Enable/disable wake on touch"""
    ...

def wake_on_ext0(pin: Any, level: int) -> None:
    """Configure EXT0 wake source"""
    ...

def wake_on_ext1(pins: Any, level: int) -> None:
    """Configure EXT1 wake source"""
    ...

def wake_on_ulp(wake: bool) -> None:
    """Enable/disable wake on ULP"""
    ...

def gpio_deep_sleep_hold(enable: bool) -> None:
    """Enable/disable GPIO hold during deep sleep"""
    ...

def hall_sensor() -> int:
    """Read hall sensor"""
    ...

def raw_temperature() -> int:
    """Read raw temperature sensor"""
    ...

def idf_heap_info(capabilities: int) -> tuple:
    """Get heap information"""
    ...

# Constants
WAKEUP_ALL_LOW = 0
WAKEUP_ANY_HIGH = 1
